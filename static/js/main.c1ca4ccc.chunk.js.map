{"version":3,"sources":["logo.svg","Alert.js","App.js","types.js","serviceWorker.js","reducers.js","store.js","index.js"],"names":["module","exports","Alert","text","buttonText","type","onClick","dispatch","useDispatch","useEffect","timer","setTimeout","clearTimeout","className","StyleColor","color","textDecoration","fontWeight","opacity","App","isServiceWorkerInitialized","useSelector","state","serviceWorkerInitialized","isServiceWorkerUpdated","serviceWorkerUpdated","serviceWorkerRegistration","registrationWaiting","waiting","postMessage","addEventListener","e","target","window","location","reload","src","logo","alt","exact","path","component","JSON","stringify","style","to","Boolean","hostname","match","rootReducer","action","payload","configureStore","config","store","createStore","ReactDOM","render","document","getElementById","onSuccess","onUpdate","registration","console","log"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,6MCwB5BC,G,MAnBD,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACjCC,EAAWC,cAWjB,OATAC,qBAAU,WACR,IAAKH,EAAS,CACZ,IAAMI,EAAQC,YAAW,WACvBJ,EAAS,CAAEF,WACV,KACH,OAAO,kBAAMO,aAAaF,OAE3B,IAGD,yBAAKG,UAAU,SACZV,EADH,IACUC,GAAc,4BAAQE,QAASA,GAAUF,M,iBCVjDU,G,MAAa,CACjBX,KAAM,CACJY,MAAO,OACPC,eAAgB,OAChBC,WAAY,MACZC,QAAS,SA6EEC,MA1Ef,WACE,IAAMC,EAA6BC,aACjC,SAAAC,GAAK,OAAIA,EAAMC,4BAEXC,EAAyBH,aAC7B,SAAAC,GAAK,OAAIA,EAAMG,wBAEXC,EAA4BL,aAChC,SAAAC,GAAK,OAAIA,EAAMI,6BAqCjB,OACE,kBAAC,IAAD,KACA,yBAAKb,UAAU,OACb,yBAAKA,UAAU,aACZO,GACC,kBAAC,EAAD,CAAOjB,KAAK,mDAAmDE,KCnElD,YDqEdmB,GACC,kBAAC,EAAD,CACErB,KAAK,oCACLC,WAAW,SACXC,KCxEa,YDyEbC,QA9CkB,WAC1B,IAAMqB,EAAsBD,EAA0BE,QAElDD,IACFA,EAAoBE,YAAY,CAAExB,KAAM,iBAExCsB,EAAoBG,iBAAiB,eAAe,SAAAC,GAC3B,cAAnBA,EAAEC,OAAOV,OACXW,OAAOC,SAASC,iBA2CpB,4BAAQtB,UAAU,cAChB,yBAAKuB,IAAKC,IAAMxB,UAAU,WAAWyB,IAAI,SACzC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAO,EAAMC,KAAK,mBAAmBC,UAxC/B,WACnB,OACI,oCACE,2DACgC,IAC7BC,KAAKC,UAAUvB,IAElB,kBAAC,IAAD,CAASwB,MAAO9B,EAAWX,KAAM0C,GAAG,yBAApC,mBAkCA,kBAAC,IAAD,CAAON,OAAO,EAAMC,KAAK,wBAAwBC,UA9BzC,WAChB,OACE,oCACC,wDAA8BC,KAAKC,UAAUnB,IAC7C,kBAAC,IAAD,CAASoB,MAAO9B,EAAWX,KAAM0C,GAAG,oBAApC,6BE7CeC,QACW,cAA7Bb,OAAOC,SAASa,UAEe,UAA7Bd,OAAOC,SAASa,UAEhBd,OAAOC,SAASa,SAASC,MACvB,2D,oBCESC,MAlBf,WAA0C,IAArB3B,EAAoB,uDAAZ,GAAI4B,EAAQ,uCACvC,OAAQA,EAAO7C,MACb,IFJmB,UEKjB,OAAO,2BACFiB,GADL,IAEEC,0BAA2BD,EAAMC,2BAErC,IFRqB,YESnB,OAAO,2BACFD,GADL,IAEEG,sBAAuBH,EAAMG,qBAC7BC,0BAA2BwB,EAAOC,UAEtC,QACE,OAAO7B,ICJE8B,IFUUC,EGZnBC,EDNN,WACE,OAAOC,YAAYN,EAAa,CAC9B1B,0BAA0B,EAC1BE,sBAAsB,EACtBC,0BAA2B,OCEjB0B,GAEdI,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,OAEFI,SAASC,eAAe,SHMDN,EGAF,CACrBO,UAAW,kBAAMN,EAAM/C,SAAS,CAAEF,KJvBb,aIwBrBwD,SAAU,SAAAC,GAAY,OACpBR,EAAM/C,SAAS,CAAEF,KJxBI,YIwBa8C,QAASW,MHF7CC,QAAQC,IAAI,WAAaX,K","file":"static/js/main.c1ca4ccc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport './Alert.css';\n\nconst Alert = ({ text, buttonText, type, onClick }) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!onClick) {\n      const timer = setTimeout(() => {\n        dispatch({ type });\n      }, 6000);\n      return () => clearTimeout(timer);\n    }\n  }, []);\n\n  return (\n    <div className=\"alert\">\n      {text} {buttonText && <button onClick={onClick}>{buttonText}</button>}\n    </div>\n  );\n};\n\nexport default Alert;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { BrowserRouter as Router, Switch, Route, NavLink   } from 'react-router-dom';\n\nimport { SW_INIT, SW_UPDATE } from './types';\nimport Alert from './Alert';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst StyleColor = {\n  text: {\n    color: '#fff',\n    textDecoration: 'none',\n    fontWeight: '300',\n    opacity: '0.6'\n  }\n}\nfunction App() {\n  const isServiceWorkerInitialized = useSelector(\n    state => state.serviceWorkerInitialized,\n  );\n  const isServiceWorkerUpdated = useSelector(\n    state => state.serviceWorkerUpdated,\n  );\n  const serviceWorkerRegistration = useSelector(\n    state => state.serviceWorkerRegistration,\n  );\n\n  const updateServiceWorker = () => {\n    const registrationWaiting = serviceWorkerRegistration.waiting;\n\n    if (registrationWaiting) {\n      registrationWaiting.postMessage({ type: 'SKIP_WAITING' });\n\n      registrationWaiting.addEventListener('statechange', e => {\n        if (e.target.state === 'activated') {\n          window.location.reload();\n        }\n      });\n    }\n  };\n\n  const InitTialized = () => {\n    return (\n        <>\n          <p>\n            isServiceWorkerInitialized=1:{' '}\n            {JSON.stringify(isServiceWorkerInitialized)}\n          </p>\n          <NavLink style={StyleColor.text} to=\"/react-gh-pages/about\">Update Page</NavLink>\n        </>\n    )\n  }\nconst UpdateSer = () => {\n  return (\n    <>\n     <p>isServiceWorkerUpdated=2: {JSON.stringify(isServiceWorkerUpdated)}</p>\n     <NavLink style={StyleColor.text} to=\"/react-gh-pages/\">Initialized Page</NavLink>    \n    </>\n  )\n}\n\n  return (\n    <Router>     \n    <div className=\"App\">\n      <div className=\"App-alert\">\n        {isServiceWorkerInitialized && (\n          <Alert text=\"Service Worker is initialized for the first time\" type={SW_INIT} />\n        )}\n        {isServiceWorkerUpdated && (\n          <Alert\n            text=\"There is a new version available.\"\n            buttonText=\"Update\"\n            type={SW_UPDATE}\n            onClick={updateServiceWorker}\n          />\n        )}\n      </div>\n\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />    \n        <Switch>\n          <Route exact={true} path=\"/react-gh-pages/\" component={InitTialized} />\n          <Route exact={true} path=\"/react-gh-pages/about\" component={UpdateSer} />\n       </Switch>        \n      </header>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","export const SW_INIT = 'SW_INIT';\nexport const SW_UPDATE = 'SW_UPDATE';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  console.log('register',  config)\n  // if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    if (process.env.NODE_ENV === 'development' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  console.log('swUrl, config', swUrl, config)\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {        \n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SW_INIT, SW_UPDATE } from './types';\n\nfunction rootReducer(state = {}, action) {\n  switch (action.type) {\n    case SW_INIT:\n      return {\n        ...state,\n        serviceWorkerInitialized: !state.serviceWorkerInitialized,\n      };\n    case SW_UPDATE:\n      return {\n        ...state,\n        serviceWorkerUpdated: !state.serviceWorkerUpdated,\n        serviceWorkerRegistration: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n","import { createStore } from 'redux';\n\nimport rootReducer from './reducers';\n\nfunction configureStore() {\n  return createStore(rootReducer, {\n    serviceWorkerInitialized: false,\n    serviceWorkerUpdated: false,\n    serviceWorkerRegistration: null,\n  });\n}\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store';\nimport { SW_INIT, SW_UPDATE } from './types';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register({\n  onSuccess: () => store.dispatch({ type: SW_INIT }),\n  onUpdate: registration =>\n    store.dispatch({ type: SW_UPDATE, payload: registration }),\n});\n"],"sourceRoot":""}